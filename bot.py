import os
import logging
import time
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import cv2
import numpy as np
from moviepy.editor import VideoFileClip
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù!
BOT_TOKEN = "7359754732:AAGdpBIOTLFoqzyj4z4zyTyfQRAA22a0w_4"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_data = {}

def create_progress_bar(percentage, bar_length=20):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled_length = int(bar_length * percentage // 100)
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
    return f"[{bar}] {percentage:.1f}%"

async def update_progress(chat_id, percentage, stage, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —á–∞—Ç–µ"""
    try:
        progress_text = f"üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ**\n\n"
        
        if stage == "download":
            progress_text += "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...**\n"
        elif stage == "analyze":
            progress_text += "üîç **–ê–Ω–∞–ª–∏–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤...**\n"
        elif stage == "processing":
            progress_text += "üé¨ **–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤...**\n"
        elif stage == "encoding":
            progress_text += "üìπ **–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...**\n"
        elif stage == "complete":
            progress_text += "‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n"
            percentage = 100
        
        progress_text += f"{create_progress_bar(percentage)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        if stage == "processing" and percentage > 0:
            frames_processed = int(percentage / 100 * 300)  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
            progress_text += f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {frames_processed}/300\n"
        
        if stage == "encoding":
            progress_text += f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {max(0, 100 - percentage)//10 * 2} —Å–µ–∫\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chat_id in progress_data:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=progress_data[chat_id],
                    text=progress_text
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                msg = await context.bot.send_message(chat_id, progress_text)
                progress_data[chat_id] = msg.message_id
        else:
            msg = await context.bot.send_message(chat_id, progress_text)
            progress_data[chat_id] = msg.message_id
            
    except Exception as e:
        logger.error(f"Error updating progress: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    welcome_text = f"""
üé¨ **Video Watermark Remover Pro** üé¨

–ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —Å –≤–∏–¥–µ–æ.

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üìπ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (–¥–æ 20MB)
2. –ù–∞–±–ª—é–¥–∞–π –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–∞–±–æ—Ç–∞—é –ª—É—á—à–µ —Å —á–µ—Ç–∫–∏–º–∏ –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –≤ —É–≥–ª–∞—Ö –≤–∏–¥–µ–æ.

**–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ üöÄ**
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    chat_id = update.message.chat_id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if update.message.video.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞:** –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return

        # –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await update_progress(chat_id, 0, "download", context)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_file = await update.message.video.get_file()
        video_path = "input_video.mp4"
        await video_file.download_to_drive(video_path)
        
        await update_progress(chat_id, 25, "download", context)
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
        await update_progress(chat_id, 30, "analyze", context)
        await asyncio.sleep(2)
        await update_progress(chat_id, 40, "analyze", context)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await update_progress(chat_id, 45, "processing", context)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        output_path = await process_video_with_progress(chat_id, video_path, context)
        
        if output_path and os.path.exists(output_path):
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await update_progress(chat_id, 100, "complete", context)
            await asyncio.sleep(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_video(
                video=output_path,
                caption="üéâ **–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!**\n\n–í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ —É–¥–∞–ª–µ–Ω—ã ‚úÖ\n–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            try:
                await context.bot.delete_message(chat_id, progress_data[chat_id])
                del progress_data[chat_id]
            except:
                pass
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(video_path)
            os.remove(output_path)
        else:
            await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.** –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.")
            
    except Exception as e:
        logger.error(f"Error processing video: {e}")
        await update.message.reply_text("‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.** –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if chat_id in progress_data:
                await context.bot.delete_message(chat_id, progress_data[chat_id])
                del progress_data[chat_id]
        except:
            pass

async def process_video_with_progress(chat_id, input_path, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        output_path = "output_video.mp4"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await update_progress(chat_id, 50, "processing", context)
        clip = VideoFileClip(input_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        duration = clip.duration
        fps = clip.fps
        total_frames = int(duration * fps)
        
        logger.info(f"Video info: {duration}s, {fps}fps, {total_frames}frames")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
        processed_frames = 0
        
        def process_frame_with_progress(frame):
            nonlocal processed_frames
            processed_frames += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10% –∏–ª–∏ –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤
            if processed_frames % max(1, total_frames // 10) == 0:
                progress = 50 + (processed_frames / total_frames) * 30
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                asyncio.run_coroutine_threadsafe(
                    update_progress(chat_id, progress, "processing", context), 
                    context.application._get_running_loop()
                )
            
            return remove_watermark_from_frame(frame)
        
        await update_progress(chat_id, 80, "encoding", context)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫ –∫–∞–¥—Ä–∞–º
        processed_clip = clip.fl_image(process_frame_with_progress)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update_progress(chat_id, 90, "encoding", context)
        
        processed_clip.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            temp_audiofile='temp-audio.m4a',
            remove_temp=True,
            verbose=False,
            logger=None
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã
        clip.close()
        processed_clip.close()
        
        return output_path
        
    except Exception as e:
        logger.error(f"Error in video processing: {e}")
        return None

def remove_watermark_from_frame(frame):
    """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ —Å –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞–¥—Ä–∞
        result = frame.copy()
        height, width = frame.shape[:2]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 4 —É–≥–ª–∞ –≥–¥–µ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏
        
        # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        if width > 200 and height > 100:
            rb_region = frame[height-80:height, width-180:width]
            blurred_rb = cv2.GaussianBlur(rb_region, (25, 25), 0)
            result[height-80:height, width-180:width] = blurred_rb
        
        # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        if width > 180 and height > 100:
            lb_region = frame[height-80:height, 0:180]
            blurred_lb = cv2.GaussianBlur(lb_region, (25, 25), 0)
            result[height-80:height, 0:180] = blurred_lb
            
        # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        if width > 200 and height > 80:
            rt_region = frame[0:80, width-180:width]
            blurred_rt = cv2.GaussianBlur(rt_region, (25, 25), 0)
            result[0:80, width-180:width] = blurred_rt
            
        # –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        if width > 180 and height > 80:
            lt_region = frame[0:80, 0:180]
            blurred_lt = cv2.GaussianBlur(lt_region, (25, 25), 0)
            result[0:80, 0:180] = blurred_lt
        
        return result
        
    except Exception as e:
        logger.error(f"Error processing frame: {e}")
        return frame

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    try:
        chat_id = update.message.chat_id
        await update.message.reply_text("‚ùå **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.** –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if chat_id in progress_data:
            try:
                await context.bot.delete_message(chat_id, progress_data[chat_id])
                del progress_data[chat_id]
            except:
                pass
    except:
        pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üé¨ Video Watermark Remover Pro –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 50)
    print("üé¨ VIDEO WATERMARK REMOVER PRO")
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ò–¥–∏ –≤ Telegram –∏ —Ç–µ—Å—Ç–∏—Ä—É–π –±–æ—Ç–∞!")
    print("=" * 50)
    
    application.run_polling()

if __name__ == "__main__":
    main()        clip = VideoFileClip(input_path)
        clip.write_videofile(output_path)
        with open(output_path, 'rb') as video:
            bot.send_video(message.chat.id, video)
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    finally:
        if os.path.exists(input_path):
            os.remove(input_path)
        if os.path.exists(output_path):
            os.remove(output_path)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def start_bot():
    bot.infinity_polling()

# --- Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–æ—Ç–∞) ---
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    start_bot()
